{"version":3,"file":"leaflet-markercluster.directive.js","sources":["../../src/leaflet-markercluster/leaflet-markercluster.directive.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,YAAY,EAAE,KAAK,EAAqB,MAAM,EAAgB,MAAM,eAAe,CAAC;AAExG,OAAO,EAAE,gBAAgB,EAAE,uBAAuB,EAAE,MAAM,yBAAyB,CAAC;AAEpF,OAAO,KAAK,CAAC,MAAM,SAAS,CAAC;AAC7B,OAAO,uBAAuB,CAAC;;;AAE/B;AAGY,IAgBX,uCAAY,gBAAkC;AAC/C,QAXC,sBAAsB;AACvB,QAAgC,eAAU,GAAc,EAAE,CAAC;AAC3D,QAIC,2CAA2C;AAC5C,QAAsC,uBAAkB,GAAuC,IAAI,YAAY,EAAwB,CAAC;AACxI,QAGE,IAAI,CAAC,gBAAgB,GAAG,IAAI,uBAAuB,CAAC,gBAAgB,CAAC,CAAC;AACxE,IAAC,CAAC;AACF,IACC,gDAAQ,GAAR;AAED,QAAE,IAAI,CAAC,gBAAgB,CAAC,IAAI,EAAE,CAAC;AAC/B,QACE,IAAM,GAAG,GAAG,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE,CAAC;AAC7C,QAAE,IAAI,CAAC,kBAAkB,GAAG,CAAC,CAAC,kBAAkB,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;AAC5E,QACE,0CAA0C;AAC5C,QAAE,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;AACrC,QACE,sDAAsD;AACxD,QAAE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;AAChC,QACE,uBAAuB;AACzB,QAAE,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;AACxD,IACC,CAAC;AAEF,IAAC,mDAAW,GAAX,UAAY,OAAwC;AACrD,QACE,mBAAmB;AACrB,QAAE,IAAI,OAAO,CAAC,YAAY,CAAC,EAAE;AAC7B,YAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;AACjC,SAAG;AACH,IACC,CAAC;AAEF,IAAS,+CAAO,GAAf,UAAgB,MAAiB;AAClC,QACE,6CAA6C;AAC/C,QAAE,IAAI,IAAI,IAAI,IAAI,CAAC,kBAAkB,EAAE;AACvC,YAAG,IAAI,CAAC,kBAAkB,CAAC,WAAW,EAAE,CAAC;AACzC,YAAG,IAAI,CAAC,kBAAkB,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;AAC7C,SAAG;AACH,IACC,CAAC,CAvDO;iEAHR,jEAGS;AAHA,SAAC,sBACV,/BAKQ,gBAXA,gBAAgB;IAMhB,EAAE,NANiB;oBAMO,mBAClC,vCAPqC;AAEjC,6BAaH,KAAK,SAAC,sBAAsB;AAAO,uCAGnC,KAAK,SAAC,6BAA6B;AAAO,qCAG1C,MAAM,SAAC,2BAA2B;AAAM;;;;;;;;;;;;;;;;;oBAAM;AAAC,IA4CjD,oCAAC;AACA,CADA,AA5DD,IA4DC;AACD,SA1Da,6BAA6B;AACvC","sourcesContent":["import { Directive, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChange } from '@angular/core';\n\nimport { LeafletDirective, LeafletDirectiveWrapper } from '@asymmetrik/ngx-leaflet';\n\nimport * as L from 'leaflet';\nimport 'leaflet.markercluster';\n\n@Directive({\n\tselector: '[leafletMarkerCluster]',\n})\nexport class LeafletMarkerClusterDirective\nimplements OnChanges, OnInit {\n\n\tleafletDirective: LeafletDirectiveWrapper;\n\tmarkerClusterGroup: L.MarkerClusterGroup;\n\n\t// Hexbin data binding\n\t@Input('leafletMarkerCluster') markerData: L.Layer[] = [];\n\n\t// Options binding\n\t@Input('leafletMarkerClusterOptions') markerClusterOptions: L.MarkerClusterGroupOptions;\n\n\t// Fired when the marker cluster is created\n\t@Output('leafletMarkerClusterReady') markerClusterReady: EventEmitter<L.MarkerClusterGroup> = new EventEmitter<L.MarkerClusterGroup>();\n\n\n\tconstructor(leafletDirective: LeafletDirective) {\n\t\tthis.leafletDirective = new LeafletDirectiveWrapper(leafletDirective);\n\t}\n\n\tngOnInit() {\n\n\t\tthis.leafletDirective.init();\n\n\t\tconst map = this.leafletDirective.getMap();\n\t\tthis.markerClusterGroup = L.markerClusterGroup(this.markerClusterOptions);\n\n\t\t// Add the marker cluster group to the map\n\t\tthis.markerClusterGroup.addTo(map);\n\n\t\t// Set the data now that the markerClusterGroup exists\n\t\tthis.setData(this.markerData);\n\n\t\t// Fire the ready event\n\t\tthis.markerClusterReady.emit(this.markerClusterGroup);\n\n\t}\n\n\tngOnChanges(changes: { [key: string]: SimpleChange }) {\n\n\t\t// Set the new data\n\t\tif (changes['markerData']) {\n\t\t\tthis.setData(this.markerData);\n\t\t}\n\n\t}\n\n\tprivate setData(layers: L.Layer[]) {\n\n\t\t// Ignore until the markerClusterGroup exists\n\t\tif (null != this.markerClusterGroup) {\n\t\t\tthis.markerClusterGroup.clearLayers();\n\t\t\tthis.markerClusterGroup.addLayers(layers);\n\t\t}\n\n\t}\n\n}\n"]}